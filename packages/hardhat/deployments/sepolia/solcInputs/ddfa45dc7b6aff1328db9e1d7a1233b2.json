{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/DEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract DEX {\r\n    uint256 public totalLiquidity;\r\n    mapping (address => uint256) public liquidity;\r\n\r\n    IERC20 token;\r\n\r\n    event EthToTokenSwap(address sender, string message, uint256 amountEth, uint256 amountToken);\r\n    event TokenToEthSwap(address sender, string message, uint256 amountToken, uint256 amountEth);\r\n    event LiquidityProvided(address sender, uint256 liquidityMinted, uint256 amountEth, uint256 tokenDeposit);\r\n    event LiquidityRemoved(address sender, uint256 liquidityAmount, uint256 ethAmount, uint256 tokenAmount);\r\n\r\n    constructor(address token_addr) {\r\n        token = IERC20(token_addr);\r\n    }\r\n\r\n    function init(uint256 tokens) public payable returns (uint256) {\r\n        require(totalLiquidity == 0, \"DEX: already initialized\");\r\n        totalLiquidity = address(this).balance;\r\n        liquidity[msg.sender] = totalLiquidity;\r\n        require(token.transferFrom(msg.sender, address(this), tokens), \"DEX: transfer failed\");\r\n\r\n        return totalLiquidity;\r\n    }\r\n\r\n    function price(\r\n        uint256 xInput,\r\n        uint256 xReserves,\r\n        uint256 yReserves\r\n    ) public pure returns (uint256 yOutput) {\r\n        uint256 xInputWithFee = 997 * xInput;\r\n        uint256 numerator = yReserves * xInputWithFee;\r\n        uint denominator = 1000*xReserves + xInputWithFee;\r\n        yOutput = numerator / denominator;\r\n\r\n        return yOutput;\r\n    }\r\n\r\n    function getLiquidity(address lp) public view returns (uint256) {\r\n        return liquidity[lp];\r\n    }\r\n\r\n    function ethToToken() public payable returns (uint256 tokenOutput) {\r\n        require(msg.value > 0, \"cannot swap 0 ETH\");\r\n\r\n        uint256 ethReserve = address(this).balance - msg.value;\r\n        uint256 tokenReserve = token.balanceOf(address(this));\r\n        \r\n        tokenOutput = price(msg.value, ethReserve, tokenReserve);\r\n        require(token.transfer(msg.sender, tokenOutput), \"DEX: ethToToken swap failed\");\r\n\r\n        emit EthToTokenSwap(msg.sender, \"Eth to Balloons\", msg.value, tokenOutput);\r\n\r\n        return tokenOutput;\r\n    }\r\n\r\n    function tokenToEth(uint256 tokenInput) public returns (uint256 ethOutput) {\r\n        require(tokenInput > 0, \"cannot swap 0 tokens\");\r\n\r\n        uint256 tokenReserve = token.balanceOf(address(this));\r\n        uint256 ethReserve = address(this).balance;\r\n\r\n        ethOutput = price(tokenInput, tokenReserve, ethReserve);\r\n        require(token.transferFrom(msg.sender, address(this), tokenInput), \"DEX: tokenToEth swap failed to send tokens\");\r\n\r\n        (bool sentEth, ) = msg.sender.call{value: ethOutput}(\"\");\r\n        require(sentEth, \"DEX: tokenToEth swap failed to send ETH\");\r\n        \r\n        emit TokenToEthSwap(msg.sender, \"Balloons to ETH\", tokenInput, ethOutput);\r\n\r\n        return ethOutput;\r\n    }\r\n\r\n    function deposit() public payable returns (uint256 tokenDeposit) {\r\n        require(msg.value > 0, \"DEX: deposit failed, no ETH sent\");\r\n\r\n        uint256 ethReserve = address(this).balance - msg.value;\r\n        uint256 tokenReserve = token.balanceOf(address(this));\r\n\r\n        tokenDeposit = (msg.value * tokenReserve / ethReserve) + 1;\r\n\r\n        require(token.transferFrom(msg.sender, address(this), tokenDeposit));\r\n\r\n        uint256 liquidityMinted = msg.value * totalLiquidity / ethReserve;\r\n        liquidity[msg.sender] += liquidityMinted;\r\n        totalLiquidity += liquidityMinted;\r\n\r\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\r\n\r\n        return tokenDeposit;\r\n    }\r\n\r\n    function withdraw(uint256 liquidityAmount) public returns (uint256 ethAmount, uint256 tokenAmount) {\r\n        require(liquidity[msg.sender] >= liquidityAmount, \"DEX: withdraw failed, sender does not have enough liquidity\");\r\n\r\n        uint256 ethReserve = address(this).balance;\r\n        uint256 tokenReserve = token.balanceOf(address(this));\r\n        ethAmount = liquidityAmount * ethReserve / totalLiquidity;\r\n        tokenAmount = liquidityAmount * tokenReserve / totalLiquidity;\r\n\r\n        liquidity[msg.sender] -= liquidityAmount;\r\n        totalLiquidity -= liquidityAmount;\r\n\r\n        (bool sent, ) = payable(msg.sender).call{ value: ethAmount }(\"\");\r\n        require(sent, \"withdraw(): revert in transferring eth to you!\");\r\n        require(token.transfer(msg.sender, tokenAmount));\r\n\r\n        emit LiquidityRemoved(msg.sender, liquidityAmount, ethAmount, tokenAmount);\r\n        \r\n        return (ethAmount, tokenAmount);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}